// Code generated for package swagger by go-bindata DO NOT EDIT. (@generated)
// sources:
// favicon.ico
package controllers

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/cognvn/gocrapi/services"
	"github.com/gin-gonic/gin"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x6d\x05\x92\xfa\x00\x00\x01\x00\x01\x00\x20\x1a\x00\x00\x01\x00\x20\x00\x57\x05\x00\x00\x16\x00\x00\x00\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x20\x00\x00\x00\x1a\x08\x06\x00\x00\x00\xd6\x9b\x5e\x3f\x00\x00\x00\x01\x73\x52\x47\x42\x01\xd9\xc9\x2c\x7f\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0e\xc4\x00\x00\x0e\xc4\x01\x95\x2b\x0e\x1b\x00\x00\x04\xfc\x49\x44\x41\x54\x78\x9c\xcd\x96\x7b\x6c\x54\x45\x14\x87\x77\xfb\xd8\x67\x1f\xb4\x48\x1f\x94\x0a\x77\x5b\xa0\xd8\x52\x28\xec\x6e\xb7\x4b\x69\xc1\x52\x69\x21\x22\x5a\x4d\x31\xb4\xf5\x59\x8c\x08\xa8\x24\xa2\x06\x81\xc0\xde\x7d\xb4\xd0\xb4\x8a\xc5\x44\x89\x8f\x2a\x11\x11\x04\xad\x49\x95\xbd\x2d\x1a\x24\x05\x03\xc4\x36\x35\x1a\x69\x42\x88\xfa\x47\x13\x8d\x01\x03\x9a\x20\xe0\x77\xb7\xb3\x78\xdd\x74\xab\x54\xfe\x70\x92\x2f\x73\x77\xe6\xde\x73\x7e\x67\xce\x99\x99\xd5\xe9\x95\x9c\x46\x9d\x62\xdb\x23\xd8\xa2\x1b\x4b\x53\x6c\x12\xbc\x01\x7b\x85\x9d\x19\x37\xf2\xf1\x6e\xb8\x26\xf8\x62\x8c\x02\xe6\xc2\x05\x61\xe3\x32\x94\xfd\x2f\x04\x98\x5d\x72\x9a\xc1\x21\x3f\x6b\x74\xc8\x45\x89\x6e\x6f\x6c\xb4\x8f\xd7\xc3\x61\xc1\x4b\x90\x23\x98\xac\x0b\x4a\x96\xeb\xef\x05\x25\xa3\x4e\x91\xb2\x19\xcf\xe6\x39\x8b\x67\x83\xc6\x46\x2e\x7c\x00\x5d\xf0\x31\x14\x58\x5d\xdb\x62\x71\xde\x10\x6f\x97\xaf\x19\xec\x72\xbf\xc9\xe9\xad\xca\x5e\xdc\x14\xf3\x4f\x91\xa4\x6b\x56\xe3\x07\x58\xa2\x99\x2b\x87\x2b\x62\xee\xbc\x2e\x68\x2b\x1a\xcd\x94\xd1\xe1\xb9\x13\xe7\x3f\xab\x02\x42\x38\xe4\x0b\xa6\x62\x79\xd5\xcd\x13\xa0\x8c\x2e\xc0\x60\xf7\x64\x12\xf9\x3b\xd7\x05\xd8\xe5\xf3\x46\xa7\xfc\x48\x4a\x59\xa0\x22\x79\x7e\x20\x33\x9a\x80\xf1\x30\x28\x38\x06\xd5\x90\x22\x58\x08\x67\xe1\x1c\x0c\xb0\x02\x4e\xfa\x64\x81\x65\x24\x73\x26\xa7\x3c\x3e\xde\xee\xe9\xc5\xf9\x1f\x88\x39\x62\x75\x79\x73\xa8\x87\x01\xd2\xf1\x5a\xea\x82\x26\xd3\x48\x02\x62\x43\x39\x1e\xe6\x56\xf2\xfc\x1c\x7c\xc5\x33\x48\x1e\xb1\xdd\x6c\x30\x85\xdf\xed\x70\x9a\x67\x90\x5a\xa2\xad\x84\xc9\xe9\xc9\xc7\x79\x2f\x62\x96\x92\x82\xe5\xa2\x26\x2e\x25\xb8\x7d\x95\xa3\xad\xa0\x2a\x26\x1e\x9a\x35\x29\xd9\x15\x31\xff\xa1\x66\xee\xe0\x68\xa6\x10\x91\x61\x2e\xf6\x2e\xc1\xf1\xd9\x70\x4a\x2c\x2e\xef\xd6\x9b\x28\x40\x1a\x55\x40\x6a\x79\x40\xdd\x11\xfb\x35\xf5\x80\x00\xdf\x13\x33\xee\xdd\x69\x88\xfe\x95\x62\x8b\x83\x75\xf0\xa5\x60\x43\x78\xea\x8c\x4e\xa7\xd7\x1f\xb6\xad\x64\x6c\x9b\x3e\x68\xf3\xc4\x77\x49\x2b\x19\x8b\x51\xc7\xc3\xf3\x10\xab\x21\x86\x02\xac\xc3\xf1\xa5\x50\x0a\x1c\xf2\x4f\x09\x6e\xff\x92\x71\xf3\x03\xcb\x46\x13\xc0\xbe\xb7\xb5\x68\x56\x60\xe7\x20\xc6\x60\x2d\x06\x3f\x82\x0e\x28\x81\x09\xb0\x1b\x3e\x87\x83\xcc\x17\xd3\x17\xc0\xa7\x70\x54\xd0\x6a\x2d\xf1\xa5\x51\x80\x7b\x49\xc3\x6f\xa4\xc3\x43\x21\x3e\x06\x27\x6e\x54\xc0\x2c\xb8\x08\x47\x60\x3f\x86\xef\xa0\x9f\x04\xa7\xa0\x5b\xf4\xc7\xa1\x12\xde\x84\x21\x50\xe0\xe9\xdb\xee\x69\xd1\x53\x88\x0f\xe3\x74\x5f\xa2\xdb\x37\x8b\x55\x38\x6e\x74\x7a\x87\xfe\xee\x34\x28\xe9\xd9\x5e\x66\x41\x22\x6c\x80\x3e\x9c\xf7\x31\xf7\x3c\x0e\x5f\x50\x1d\x0b\x21\x5b\x20\xc0\xd8\xed\xc2\xf1\x22\x48\x80\xab\xd0\xc0\xf8\x54\x38\xc1\xf3\x8a\xb0\x79\xab\xdb\x97\x90\x34\xcf\x37\x05\xe7\x7b\xd5\x54\x20\xe0\x74\x64\xd4\x69\xa1\xfb\x60\x18\xf5\x68\x5d\x1a\xba\xd9\x40\x1f\x94\x32\x30\xf6\x20\x7c\x0d\x8f\x8b\x48\x2f\xc3\x62\x21\xa0\x11\x6a\xe0\x57\xa8\x82\xa9\x83\x11\x02\xd4\x46\x1a\xda\x71\x7e\x11\xae\x98\x8a\xbd\xaf\x46\x0a\xc8\xd6\x2c\xb9\x7a\xe0\x2c\xd2\x4e\xab\x11\x12\xd5\x1e\xe8\x83\x93\xfc\xde\x4a\x3f\x11\xba\x60\x40\x1d\x17\x42\xd4\xf7\x24\xe8\x84\x65\x39\x3d\xae\xb8\xd4\xee\x99\x25\xe3\xbb\x67\x15\x20\xa0\x53\x14\xe2\x37\x49\xa5\x01\xd7\x0d\x09\x50\x1b\x06\xad\xe0\x80\xfc\xc1\xe1\x0a\x37\x81\x7b\x70\xb8\x1e\xe6\x0c\xfe\xf5\x9e\x05\x5c\x47\xb3\xad\xd9\x49\xdd\xf9\x77\x19\x94\x69\x03\xe6\xee\xbc\x35\xec\x86\x5d\xaa\x00\xa2\xdf\x51\xf4\xd0\x5b\x69\x11\x02\xb8\xfd\x14\x5b\xad\x60\x39\x34\x8a\x42\x54\xb9\x3b\x6a\xc1\x8e\xd0\x26\xf7\x14\x4f\x48\x54\xf2\xeb\xe2\x94\xa9\xdf\xea\xc5\x1d\x62\x54\xa6\x37\x21\xc0\x47\xee\x7b\xad\x6e\xff\xa2\xc4\x79\x81\xfa\xe8\x16\x46\xd8\x05\xd1\x5e\x7d\xa6\xfd\x7d\x5d\x7a\x45\x93\x85\xe3\x35\x8b\x13\x6e\x66\x72\x47\xd9\x9c\x38\x25\xf7\x47\xcd\xb7\x21\xe2\xbb\xa7\xb5\xb1\x05\x1f\x60\x4b\x2e\xa0\x7f\x31\xb9\xd4\x6f\x1f\xb3\x00\x4b\x89\x2f\x8f\x48\xda\x59\xca\xb7\xe9\x0f\x91\xd3\x13\xf0\x1d\x0c\x99\x6b\x9f\xac\xd3\xab\x17\x96\xc6\x79\x8c\x92\x73\xc1\xa2\xe4\xad\xc3\xf9\x44\xea\xa0\xd9\xec\xf2\x6d\x94\x96\xb6\x46\xf9\x93\x12\x12\x20\xc5\xb3\x05\x1b\xc5\x9f\x8c\x2e\x9e\x57\x6b\xa7\x39\x50\xd2\xc9\xe5\x01\xed\xf1\x1a\x06\x51\x81\x18\x25\xb7\x23\xec\x3c\x56\xc9\xfd\x25\x49\xc9\xaf\xcf\xea\x99\x6b\x45\xec\x0e\x04\xf4\x27\x97\x06\xb2\xa2\x3b\xff\x97\x0d\x67\x73\xe1\x72\xa4\x00\x56\xe1\x98\xe1\x50\x61\x23\x51\x7f\x6f\x52\xa6\x6f\xcc\xd8\x57\x5e\x98\x54\xea\x7f\x14\x6a\x10\x77\x80\x55\xa8\x19\x93\xc3\x82\xba\xd7\x53\xd3\x2a\xb6\xa7\xb4\xbe\x17\xd4\x8a\x78\x4a\xdd\x52\xf4\x67\xd4\x34\xd0\x77\x10\xe5\x9a\x5b\x16\xcb\x49\x19\xd5\xa1\x9a\xd8\xcc\xef\x7e\xe6\xce\xa5\x94\x37\xdf\x9f\x3c\xdf\x3f\xbb\x6c\xd5\x6e\xfd\x58\x05\x98\x13\xdd\xfe\x06\x22\x58\x6d\x75\xf9\xca\xe8\xf3\xb8\x54\x26\x51\xd9\x85\x14\x55\x05\xce\xaa\xcc\x40\x7d\xac\xc0\x91\x9b\xb1\xb5\xea\xd9\x8f\xa8\xdf\x89\x7c\x73\x56\x75\xdb\x38\x7b\xfd\x2b\x63\x73\x1e\x6e\x18\x35\x80\x4b\x3d\xc5\x70\xfc\x19\x67\xfb\x27\x08\x51\x1d\xab\x7b\xfc\x24\x91\xaa\xa7\xdc\x55\xc6\xdf\x65\x7c\xa1\xc1\x29\x9f\xe2\xea\x5d\x3f\xae\xb4\xc9\xfc\x9f\x1c\x47\xb6\x94\x32\xbf\x81\x6d\x57\x64\x74\x78\x37\xe1\x68\x53\x46\x65\x4b\x1e\xc2\xee\x43\x44\x27\x45\x76\x1c\x01\x6d\x99\x95\xdb\xd3\x53\xca\x03\x39\xb3\x6b\x5f\x8e\x5a\xed\x7f\x02\x29\x1c\xa8\x06\xa0\x61\x4e\x81\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x61\x93\xf3\x8b\x6d\x05\x00\x00")

func faviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_faviconIco,
		"favicon.ico",
	)
}

func faviconIco() (*asset, error) {
	bytes, err := faviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "favicon.ico", size: 1389, mode: os.FileMode(511), modTime: time.Unix(1617172437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"favicon.ico": faviconIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func FaviconController(c *gin.Context) {
	data, err := Asset("favicon.icon")
	services.ErrorHandler(c, err)
	c.Data(200, "image/ico", data)
}
